User Story 1: Add a New Aircraft
As a user, I want to add a new Aircraft so that I can track the aircrafts I am interested in.
By doing so, users can easily add new aircraft to their list, ensuring they can keep track of all the aircraft and their information.

Tasks:

-Create a form to add a new aircraft.
-Ensure the form collects necessary information such as aircraft type, airline name, number of passengers, and the associated airport.
-Send a POST request to the backend to add the new aircraft.
-Display a success or error message based on the result of the addition.
-Validate the user input to ensure the data is correct before sending the request.

User Story 2: View a List of All Aircraft
As a user, I want to view a list of all Aircraft so that I can see which aircraft are available.
By doing so, users can easily view all available aircraft, ensuring they have access to the information they need.

Tasks:

-Fetch the list of aircraft from the backend using a GET request.
-Display the list of aircraft in a readable format, showing details like aircraft type, airline name, and number of passengers.
-Ensure the list is dynamically updated when a new aircraft is added or an existing one is deleted.
-Provide pagination or scrolling if the list grows large, ensuring smooth performance.

User Story 3: Update an Existing Aircraft
As a user, I want to update an existing aircraft so that I can modify the aircraft details if there are any changes.
By doing so, users can ensure that the information about the aircraft remains accurate and up to date.

Tasks:

-Add an edit button for each aircraft in the list.
-When the user clicks the edit button, pre-populate the form with the current information of the selected aircraft.
-Allow the user to modify the aircraft details (e.g., type, airline name, number of passengers).
-Send a PUT request to the backend to update the aircraft in the database.
-Display a success or error message based on the result of the update.

User Story 4: Delete an Aircraft
As a user, I want to delete an aircraft so that I can remove aircrafts I am no longer interested in.
By doing so, users can easily manage their list of aircraft and ensure that only relevant data remains in the system.

Tasks:

-Add a delete button for each aircraft in the list.
-Send a DELETE request to the backend to remove the aircraft from the database.
-Refresh the list of aircraft after deletion to reflect the changes.
-Display a success or error message after the deletion process.
-Ensure proper confirmation or warning before deleting an aircraft to prevent accidental deletions.